!function(n){function e(i){if(t[i])return t[i].exports;var o=t[i]={i:i,l:!1,exports:{}};return n[i].call(o.exports,o,o.exports,e),o.l=!0,o.exports}var t={};e.m=n,e.c=t,e.d=function(n,t,i){e.o(n,t)||Object.defineProperty(n,t,{configurable:!1,enumerable:!0,get:i})},e.n=function(n){var t=n&&n.__esModule?function(){return n.default}:function(){return n};return e.d(t,"a",t),t},e.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},e.p="",e(e.s=0)}([function(module,exports,__webpack_require__){"use strict";eval("\n\n/* NOTE: disable all eslint lodash rules here */\n/* eslint-disable lodash/import-scope */\n/* eslint-disable prefer-get */\n/* eslint-disable prefer-noop */\n/* eslint-disable prefer-lodash-typecheck */\n/* global clients */\n// require('serviceworker-cache-polyfill');\n\nvar APPLICATION_SERVER_PUBLIC_KEY = \"BHqIuADfBc0-mSygK9yQbIhce8PzdXB6LKlfOSVmr39Ee_nPLlYDzhYYESzrMlZyb7sCAyQYgRTNBehuCxBFXR8\";\nvar APP_URL = \"https://uplink-alpha-test.firebaseapp.com/\";\nvar ACTIONS = {\n  VIDEO_ANSWER: 'VIDEO_ANSWER',\n  VIDEO_REJECT: 'VIDEO_REJECT'\n};\n\nself.addEventListener('install', function (event) {\n  self.skipWaiting();\n});\n\nself.addEventListener('activate', function (event) {\n  console.log('Activated', event);\n});\n\nself.addEventListener('push', function (event) {\n  // console.log('Push message received', event);\n  var title = 'Swift Projects';\n  if (event.data) {\n    var json = event.data.json();\n    var data = json && json.data || {};\n\n    if (data.type === 'video-chat-invite') {\n      event.waitUntil(self.registration.showNotification(json.title || title, {\n        body: json.body || 'You have an update!',\n        icon: 'icon.png',\n        tag: json.tag || 'push',\n        actions: [{ action: ACTIONS.VIDEO_ANSWER, title: 'Answer' }, { action: ACTIONS.VIDEO_REJECT, title: 'Reject' }],\n        data: data\n      }));\n    } else {\n      event.waitUntil(self.registration.showNotification(json.title || title, {\n        body: json.body || 'You have an update!',\n        icon: 'icon.png',\n        tag: json.tag || 'push'\n      }).catch(logFailure('Failed to display push notification')));\n    }\n  } else {\n    event.waitUntil(self.registration.showNotification(title, {\n      body: 'You have an update!',\n      icon: 'icon.png',\n      tag: 'push'\n    }).catch(logFailure('Failed to display push notification')));\n  }\n});\n\nself.addEventListener('notificationclick', function (event) {\n  // console.log('Notification click', event);\n  // console.log('Notification click: tag ', event.notification.tag);\n  event.notification.close();\n  var messageId = event.notification.data;\n\n  if (event.action === ACTIONS.VIDEO_ANSWER) {\n\n    if (event.notification && event.notification.data) {\n      var data = event.notification.data;\n      if (data.channelId && data.sessionId) {\n        // if accept call action\n        var url = '/#/video-chat/' + data.channelId + '/' + data.sessionId;\n        event.waitUntil(clients.openWindow(url));\n      }\n    }\n  } else if (!event.action || event.notification && event.notification.type === 'video-chat-invite') {\n    // if no action clicked, assume user wants to answer the call.\n    if (event.notification && event.notification.data) {\n      var _data = event.notification.data;\n      if (_data.channelId && _data.sessionId) {\n        // if accept call action\n        var _url = '/#/video-chat/' + _data.channelId + '/' + _data.sessionId;\n        event.waitUntil(clients.openWindow(_url));\n      }\n    }\n  } else {\n    event.waitUntil(clients.matchAll({\n      includeUncontrolled: true,\n      type: 'window'\n    }).then(function (windowClients) {\n      console.log('total windowClients = ', windowClients.length);\n      for (var i = 0; i < windowClients.length; i++) {\n        var client = windowClients[i];\n        // TODO: use this method once we can get a url from the notification payload\n        // if (client.url === url && 'focus' in client) {\n        //   return client.focus();\n        // }\n        if (client.focused) {\n          return client.focus();\n        }\n      }\n      if (windowClients[0] && 'focus' in windowClients[0]) {\n        return windowClients[0].focus();\n      } else if (clients.openWindow) {\n        // return clients.openWindow(url);\n        return clients.openWindow(APP_URL);\n      }\n    }));\n  }\n});\n\nself.addEventListener('pushsubscriptionchange', function (event) {\n  console.log('[Service Worker]: \\'pushsubscriptionchange\\' event fired.');\n  var applicationServerKey = urlB64ToUint8Array(APPLICATION_SERVER_PUBLIC_KEY);\n  event.waitUntil(self.registration.pushManager.subscribe({\n    userVisibleOnly: true,\n    applicationServerKey: applicationServerKey\n  }).then(function (newSubscription) {\n    // TODO: Send to application server\n    console.log('[Service Worker] New subscription: ', newSubscription);\n  }));\n});\n\nfunction urlB64ToUint8Array(base64String) {\n  var padding = '='.repeat((4 - base64String.length % 4) % 4);\n  var base64 = (base64String + padding).replace(/\\-/g, '+').replace(/_/g, '/');\n\n  var rawData = window.atob(base64);\n  var outputArray = new Uint8Array(rawData.length);\n\n  for (var i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n  return outputArray;\n}\n\nfunction getEndpoint() {\n  return self.registration.pushManager.getSubscription().then(function (subscription) {\n    if (subscription) {\n      return subscription.endpoint;\n    }\n\n    throw new Error('User not subscribed');\n  });\n}\n\nfunction logFailure(msg) {\n  return function logFailureCurried(e) {\n    (console.error || console.log)(msg, e);\n  };\n}\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/babel-loader/lib??ref--10-0!./node_modules/eslint-loader??ref--10-1!./src/service-worker/sw.js\n// module id = 0\n// module chunks = 0\n\n//# sourceURL=webpack:///./src/service-worker/sw.js?./node_modules/babel-loader/lib??ref--10-0!./node_modules/eslint-loader??ref--10-1")}]);